# See https://docs.gitlab.com/ce/ci/yaml/README.html for the documentation
image: docker/compose:alpine-1.28.2

variables: &variables
  FF_NETWORK_PER_BUILD: 1
  TANGO_HOST: tango_databaseds:10000
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/JTango"

services:
  - name: tangocs/mysql:9.2.2
    alias: tango_mysql
    entrypoint:
      - env
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_INITDB_SKIP_TZINFO=1
      - /usr/local/bin/docker-entrypoint.sh
    command:
      - mysqld
      - --sql-mode=
      - --innodb=OFF
      - --default-storage-engine=MyISAM
  - name: tangocs/tango-cs:9
    alias: tango_databaseds
    entrypoint:
      - env
      - MYSQL_HOST=tango_mysql:3306
      - MYSQL_USER=tango
      - MYSQL_PASSWORD=tango
      - MYSQL_DATABASE=tango
      - /usr/local/bin/wait-for-it.sh
      - tango_mysql:3306
      - --timeout=30
      - --strict
      - --
    command:
      - /usr/bin/supervisord
      - -c
      - /etc/supervisord.conf

stages:
# verification
  - test
  - verify
#  release
  - build
  - upload
  - deploy


.job-template: &job-template
  script:
    - mvn clean install
  rules:
    - if: $CI_COMMIT_TAG
      when: never

.release-job-template: &release-job-template
  script:
    - mvn clean install -DskipTests
    # Mark the build artifact(jar) with proper JAVA_VERSION
    - ls assembly/target/*.jar | cut -f 1,2,3 -d '.' | xargs -Ifile mv file.jar file-${JAVA_VERSION}.jar
    # Create JTANGO version env variable (use in upload, deploy stage)
    - echo "JTANGO_${JAVA_VERSION}_VERSION=$(ls *.jar | cut -f 1,2,3 -d '.')" > version.env
  artifacts:
    paths:
      - assembly/target/*.jar
    reports:
      dotenv: version.env

test-java11:
  image: maven:3.6.3-openjdk-11-slim
  stage: test
  <<: *job-template
  variables:
    <<: *variables

test-java8:
  image: maven:3.6-jdk-8-slim
  stage: test
  <<: *job-template
  variables:
    <<: *variables

#deploy-to-sonar:
#  image: maven:3.6.3-openjdk-11-slim
#  stage: verify
#  script:
#    - mvn clean verify sonar:sonar -Pverify

# TODO rewrite to gitlab
#  addons:
#    sonarcloud:
#      organization: "tango-controls"
#      token: ${SONAR_TOKEN}

#deploy-to-codacy:
#  image: maven:3.6-jdk-8-slim
#  stage: verify
#  script:
#    - mavn clean install -Pverify
#    - mvn com.gavinmogan:codacy-maven-plugin:coverage -Pverify

#deploy-to-codcov:
#  image: maven:3.6-jdk-8-slim
#  stage: verify
#  script:
#    - mvn clean install -Pverify
#    - bash <(curl -s https://codecov.io/bash)

#deploy-artifacts:
#  image: maven:3.6-jdk-8-slim
#  before_script:
#    - cd parent
#    - mvn versions:set versions:update-child-modules -DnewVersion=${TRAVIS_BRANCH} -DprocessAllModule -DgenerateBackupPoms=false -Prelease
#    - cd ..
#    - mvn install -Dmaven.test.skip=true
#  script:
#    - set -e
#    - .travis/maven_deploy.sh

#build:
#  stage: build
#  image: alpine:latest
#  rules:
#    - if: $CI_COMMIT_TAG
#  script:
#    - mkdir bin
#    - echo "Mock binary for ${DARWIN_AMD64_BINARY}" > bin/${DARWIN_AMD64_BINARY}
#    - echo "Mock binary for ${LINUX_AMD64_BINARY}" > bin/${LINUX_AMD64_BINARY}
#  artifacts:
#    paths:
#      - bin/

release:build:openjdk-11:
  image: maven:3.6.3-openjdk-11-slim
  stage: build
  <<: *release-job-template
  variables:
    <<: *variables
    JAVA_VERSION: openjdk_11
  only:
    - tags

release:build:openjdk-8:
  image: maven:3.6.3-openjdk-11-slim
  stage: build
  <<: *release-job-template
  variables:
    <<: *variables
    JAVA_VERSION: openjdk_8
  only:
    - tags

release:upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - >
      echo ${JTANGO_openjdk11_VERSION}
      echo ${JTANGO_openjdk8_VERSION}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${JTANGO_openjdk11_VERSION} ${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${CI_COMMIT_TAG}/${JTANGO_openjdk11_VERSION}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${JTANGO_openjdk8_VERSION} ${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${CI_COMMIT_TAG}/${JTANGO_openjdk8_VERSION}

release:deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - >
      release-cli create --name "JTango $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG --description ${CI_COMMIT_MESSAGE} \
        --assets-link "{\"name\":\"JTango-${CI_COMMIT_TAG}-openjdk11\",\"url\":\"${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${CI_COMMIT_TAG}/${JTANGO_openjdk11_VERSION}"}" \
        --assets-link "{\"name\":\"JTango-${CI_COMMIT_TAG}-openjdk8\",\"url\":\"${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${CI_COMMIT_TAG}/${JTANGO_openjdk8_VERSION}\"}"


#release:
#  stage: release
#  image: registry.gitlab.com/gitlab-org/release-cli
#  # We recommend the use of `rules` to prevent these pipelines
#  # from running. See the notes section below for details.
#  rules:
#    - if: $CI_COMMIT_TAG
#  script:
#    - >
#      echo "Release" ${CI_COMMIT_TAG}

#      .travis/maven_deploy.sh
#      release-cli create --name release-branch-$CI_JOB_ID --description release-branch-$CI_COMMIT_REF_NAME-$CI_JOB_ID
#      --tag-name job-$CI_JOB_ID --ref $CI_COMMIT_SHA
#      --assets-link '{"name":"Asset1","url":"https://<domain>/some/location/1","link_type":"other","filepath":"xzy"}'
#      --assets-link '{"name":"Asset2","url":"https://<domain>/some/location/2"}'
#      --milestone "v1.0.0" --milestone "v1.0.0-rc"
#      --released-at "2020-06-30T07:00:00Z"


# TODO rewrite to gitlab
#deploy:
#  - provider: script
#    script: bash .travis/maven_deploy.sh
#    skip_cleanup: true
#    on:
#      tags: true
#  - provider: releases
#    file: assembly/target/JTango-${TRAVIS_TAG}.jar
#    api_key: $GITHUB_TOKEN
#    skip_cleanup: true
#    draft: true
#    on:
#      tags: true